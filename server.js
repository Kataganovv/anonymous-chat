const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const path = require('path');
const cors = require('cors');

// –°–æ–∑–¥–∞–µ–º Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
const app = express();
const server = http.createServer(app);

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Socket.IO —Å CORS
const io = socketIo(server, {
    cors: {
        origin: "*",
        methods: ["GET", "POST"],
        credentials: false
    }
});

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname)));

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
const activeUsers = new Map();
const messages = [];
const MAX_MESSAGES = 100; // –ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const colors = [
    '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7',
    '#DDA0DD', '#98D8C8', '#F7DC6F', '#BB8FCE', '#85C1E9'
];

function getRandomColor() {
    return colors[Math.floor(Math.random() * colors.length)];
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID
function generateId() {
    return Math.random().toString(36).substr(2, 9);
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
function formatTime(date = new Date()) {
    return date.toISOString();
}

// Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
io.on('connection', (socket) => {
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    socket.emit('messages_history', messages.slice(-50));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    updateOnlineCount();
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    socket.on('user_join', (userData) => {
        const user = {
            id: socket.id,
            name: userData.name || `–ì–æ—Å—Ç—å_${socket.id.slice(-4)}`,
            color: userData.color || getRandomColor(),
            joinedAt: new Date()
        };
        
        activeUsers.set(socket.id, user);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        const joinMessage = {
            id: generateId(),
            type: 'system',
            text: `${user.name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É`,
            timestamp: formatTime(),
            userId: socket.id,
            author: '–°–∏—Å—Ç–µ–º–∞'
        };
        
        messages.push(joinMessage);
        if (messages.length > MAX_MESSAGES) {
            messages.shift();
        }
        
        io.emit('message', joinMessage);
        updateOnlineCount();
        
        console.log(`üë§ ${user.name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É`);
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    socket.on('send_message', (messageData) => {
        const user = activeUsers.get(socket.id);
        if (!user) {
            socket.emit('error', { message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            return;
        }
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        if (!messageData.text || messageData.text.trim().length === 0) {
            socket.emit('error', { message: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' });
            return;
        }
        
        if (messageData.text.length > 1000) {
            socket.emit('error', { message: '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ' });
            return;
        }
        
        const message = {
            id: generateId(),
            type: 'user',
            text: messageData.text.trim(),
            author: user.name,
            userId: socket.id,
            color: user.color,
            timestamp: formatTime(),
            emoji: messageData.emoji || null
        };
        
        messages.push(message);
        if (messages.length > MAX_MESSAGES) {
            messages.shift();
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        io.emit('message', message);
        
        console.log(`üí¨ ${user.name}: ${message.text}`);
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∞–Ω–∏—è
    socket.on('typing_start', () => {
        const user = activeUsers.get(socket.id);
        if (user) {
            socket.broadcast.emit('user_typing', {
                userId: socket.id,
                userName: user.name
            });
        }
    });
    
    socket.on('typing_stop', () => {
        socket.broadcast.emit('user_stop_typing', {
            userId: socket.id
        });
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    socket.on('disconnect', () => {
        const user = activeUsers.get(socket.id);
        if (user) {
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const leaveMessage = {
                id: generateId(),
                type: 'system',
                text: `${user.name} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç`,
                timestamp: formatTime(),
                userId: socket.id,
                author: '–°–∏—Å—Ç–µ–º–∞'
            };
            
            messages.push(leaveMessage);
            if (messages.length > MAX_MESSAGES) {
                messages.shift();
            }
            
            socket.broadcast.emit('message', leaveMessage);
            activeUsers.delete(socket.id);
            updateOnlineCount();
            
            console.log(`‚ùå ${user.name} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç`);
        }
    });
});

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function updateOnlineCount() {
    const count = activeUsers.size;
    io.emit('online_count', count);
    console.log(`üë• –û–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${count}`);
}

// REST API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
app.get('/api/status', (req, res) => {
    res.json({
        status: 'active',
        online_users: activeUsers.size,
        total_messages: messages.length,
        uptime: process.uptime(),
        server_time: new Date().toISOString()
    });
});

app.get('/api/messages', (req, res) => {
    const limit = parseInt(req.query.limit) || 50;
    const offset = parseInt(req.query.offset) || 0;
    
    const recentMessages = messages
        .slice(-limit - offset, messages.length - offset)
        .reverse();
        
    res.json({
        messages: recentMessages,
        total: messages.length,
        online_users: activeUsers.size
    });
});

// –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üåê –õ–æ–∫–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø: http://localhost:${PORT}`);
    console.log(`üì± –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —Ç–æ–π –∂–µ —Å–µ—Ç–∏: http://[–≤–∞—à-IP]:${PORT}`);
    console.log('üí¨ –ß–∞—Ç —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
});

// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
    server.close(() => {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        process.exit(0);
    });
});

module.exports = { app, server, io };