// WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á–∞—Ç–∞
class WebSocketManager {
    constructor() {
        this.socket = null;
        this.isConnected = false;
        this.reconnectAttempts = 0;
        this.maxReconnectAttempts = 5;
        this.reconnectDelay = 1000;
        this.user = null;
        this.messageCallbacks = [];
        this.statusCallbacks = [];
        
        // –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º init –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –¥–æ–∂–¥–∞—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    }
    
    async init() {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL —Å–µ—Ä–≤–µ—Ä–∞
        const host = window.location.hostname;
        
        // –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º localhost:3000
        let serverURL;
        if (host === 'localhost' || host === '127.0.0.1') {
            serverURL = 'http://localhost:3000';
        } else {
            // –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            // –≠—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª —Å–µ—Ä–≤–µ—Ä –ª–æ–∫–∞–ª—å–Ω–æ
            serverURL = 'http://localhost:3000';
        }
        
        console.log('üîå –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É:', serverURL);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
        const isServerAvailable = await this.checkServerAvailability(serverURL);
        
        if (!isServerAvailable) {
            console.log('‚ö†Ô∏è WebSocket —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é');
            this.notifyStatusCallbacks('server_unavailable');
            return;
        }
        
        this.socket = io(serverURL, {
            transports: ['websocket', 'polling'],
            timeout: 5000,
            forceNew: true
        });
        
        this.setupEventListeners();
    }
    
    async checkServerAvailability(serverURL) {
        try {
            const response = await fetch(serverURL.replace(/^ws/, 'http'), {
                method: 'GET',
                timeout: 3000
            });
            return response.ok;
        } catch (error) {
            console.log('üîç –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
            return false;
        }
    }
    
    setupEventListeners() {
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        this.socket.on('connect', () => {
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É');
            this.isConnected = true;
            this.reconnectAttempts = 0;
            this.notifyStatusCallbacks('connected');
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if (this.user) {
                this.joinChat(this.user.name, this.user.color);
            }
        });
        
        // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
        this.socket.on('disconnect', (reason) => {
            console.log('‚ùå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', reason);
            this.isConnected = false;
            this.notifyStatusCallbacks('disconnected');
            
            // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if (reason !== 'io client disconnect') {
                this.attemptReconnect();
            }
        });
        
        // –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        this.socket.on('connect_error', (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
            this.isConnected = false;
            this.notifyStatusCallbacks('connection_error');
            this.attemptReconnect();
        });
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        this.socket.on('message', (message) => {
            this.notifyMessageCallbacks('message', message);
        });
        
        // –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        this.socket.on('messages_history', (messages) => {
            this.notifyMessageCallbacks('history', messages);
        });
        
        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        this.socket.on('online_count', (count) => {
            this.notifyStatusCallbacks('online_count', count);
        });
        
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—á–∞—Ç–∞–µ—Ç
        this.socket.on('user_typing', (data) => {
            this.notifyMessageCallbacks('user_typing', data);
        });
        
        this.socket.on('user_stop_typing', (data) => {
            this.notifyMessageCallbacks('user_stop_typing', data);
        });
        
        // –û—à–∏–±–∫–∏
        this.socket.on('error', (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
            this.notifyStatusCallbacks('server_error', error);
        });
    }
    
    attemptReconnect() {
        if (this.reconnectAttempts < this.maxReconnectAttempts) {
            this.reconnectAttempts++;
            const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1);
            
            console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${this.reconnectAttempts}/${this.maxReconnectAttempts} —á–µ—Ä–µ–∑ ${delay}ms`);
            
            setTimeout(() => {
                if (!this.isConnected) {
                    this.socket.connect();
                }
            }, delay);
        } else {
            console.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
            this.notifyStatusCallbacks('max_reconnect_attempts');
        }
    }
    
    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É
    joinChat(userName, userColor) {
        if (!this.isConnected) {
            console.warn('‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
            return false;
        }
        
        this.user = { name: userName, color: userColor };
        this.socket.emit('user_join', this.user);
        return true;
    }
    
    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    sendMessage(text, emoji = null) {
        if (!this.isConnected) {
            console.warn('‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
            return false;
        }
        
        if (!text || text.trim().length === 0) {
            console.warn('‚ö†Ô∏è –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
            return false;
        }
        
        this.socket.emit('send_message', {
            text: text.trim(),
            emoji: emoji
        });
        
        return true;
    }
    
    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
    startTyping() {
        if (this.isConnected) {
            this.socket.emit('typing_start');
        }
    }
    
    stopTyping() {
        if (this.isConnected) {
            this.socket.emit('typing_stop');
        }
    }
    
    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    onMessage(callback) {
        this.messageCallbacks.push(callback);
    }
    
    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å
    onStatus(callback) {
        this.statusCallbacks.push(callback);
    }
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    notifyMessageCallbacks(type, data) {
        this.messageCallbacks.forEach(callback => {
            try {
                callback(type, data);
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –≤ callback —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            }
        });
    }
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ —Å—Ç–∞—Ç—É—Å–µ
    notifyStatusCallbacks(type, data) {
        this.statusCallbacks.forEach(callback => {
            try {
                callback(type, data);
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –≤ callback —Å—Ç–∞—Ç—É—Å–∞:', error);
            }
        });
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    getConnectionStatus() {
        return {
            connected: this.isConnected,
            reconnectAttempts: this.reconnectAttempts,
            user: this.user
        };
    }
    
    // –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è
    disconnect() {
        if (this.socket) {
            this.socket.disconnect();
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞
window.wsManager = new WebSocketManager();