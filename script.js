// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const CONFIG = {
    maxMessages: 100,
    maxMessageLength: 500,
    maxNameLength: 20,
    typingTimeout: 3000,
    messageTimeout: 10000,
    colors: [
        '#667eea', '#764ba2', '#f093fb', '#f5576c',
        '#4facfe', '#00f2fe', '#43e97b', '#38f9d7',
        '#ffecd2', '#fcb69f', '#a8edea', '#fed6e3',
        '#ff9a9e', '#fecfef', '#ffeaa7', '#fab1a0'
    ]
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const state = {
    currentUser: null,
    messages: [],
    isTyping: false,
    typingUsers: new Set(),
    onlineUsers: new Set(),
    socket: null,
    isConnected: false
};

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –∏–º—ë–Ω
const randomNames = [
    '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫', '–¢–∞–π–Ω—ã–π –ê–≥–µ–Ω—Ç', '–¶–∏—Ñ—Ä–æ–≤–æ–π –ü—Ä–∏–∑—Ä–∞–∫', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ì–µ—Ä–æ–π',
    '–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –î—Ä—É–≥', '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ú—É–¥—Ä–µ—Ü', '–ö–æ–¥-–ú–∞—Å—Ç–µ—Ä', '–ü–∏–∫—Å–µ–ª—å–Ω—ã–π –•—É–¥–æ–∂–Ω–∏–∫',
    '–ó–≤—ë–∑–¥–Ω—ã–π –°—Ç—Ä–∞–Ω–Ω–∏–∫', '–¶–∏—Ñ—Ä–æ–≤–æ–π –ö–æ—á–µ–≤–Ω–∏–∫', '–ë–∏—Ç–æ–≤—ã–π –í–æ–ª—à–µ–±–Ω–∏–∫', '–ö–∏–±–µ—Ä-–§–∏–ª–æ—Å–æ—Ñ',
    '–°–µ—Ç–µ–≤–æ–π –ü—Ä–∏–∑—Ä–∞–∫', '–ê–ª–≥–æ-–†–∏—Ç–º', '–î–∞—Ç–∞–Ω—ã–π –î–µ—Ç–µ–∫—Ç–∏–≤', '–ö—Ä–∏–ø—Ç–æ-–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å'
];

// –£—Ç–∏–ª–∏—Ç—ã
const utils = {
    generateId: () => Math.random().toString(36).substr(2, 9),
    
    formatTime: (date) => {
        const now = new Date();
        const diff = now - date;
        
        if (diff < 60000) return '—Å–µ–π—á–∞—Å';
        if (diff < 3600000) return `${Math.floor(diff / 60000)} –º–∏–Ω –Ω–∞–∑–∞–¥`;
        if (diff < 86400000) return `${Math.floor(diff / 3600000)} —á –Ω–∞–∑–∞–¥`;
        
        return date.toLocaleTimeString('ru-RU', { 
            hour: '2-digit', 
            minute: '2-digit' 
        });
    },
    
    getRandomColor: () => CONFIG.colors[Math.floor(Math.random() * CONFIG.colors.length)],
    
    getRandomName: () => randomNames[Math.floor(Math.random() * randomNames.length)],
    
    sanitizeText: (text) => {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    },
    
    getUserAvatar: (name) => {
        return name.charAt(0).toUpperCase();
    },
    
    showNotification: (message, type = 'success') => {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        
        document.getElementById('notifications').appendChild(notification);
        
        setTimeout(() => {
            notification.style.animation = 'notificationSlideIn 0.3s ease-out reverse';
            setTimeout(() => notification.remove(), 300);
        }, 3000);
    }
};

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
const userManager = {
    createUser: (name) => {
        const user = {
            id: utils.generateId(),
            name: name.trim(),
            color: utils.getRandomColor(),
            joinedAt: new Date()
        };
        
        state.currentUser = user;
        localStorage.setItem('chatUser', JSON.stringify(user));
        return user;
    },
    
    loadUser: () => {
        const saved = localStorage.getItem('chatUser');
        if (saved) {
            try {
                state.currentUser = JSON.parse(saved);
                return state.currentUser;
            } catch (e) {
                localStorage.removeItem('chatUser');
            }
        }
        return null;
    },
    
    updateUserDisplay: () => {
        if (state.currentUser) {
            document.getElementById('userName').textContent = state.currentUser.name;
        }
    }
};

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
const messageManager = {
    addMessage: (message) => {
        state.messages.push(message);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        if (state.messages.length > CONFIG.maxMessages) {
            state.messages = state.messages.slice(-CONFIG.maxMessages);
        }
        
        messageManager.renderMessage(message);
        messageManager.scrollToBottom();
    },
    
    renderMessage: (message) => {
        const messagesContainer = document.getElementById('chatMessages');
        
        // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        const emptyState = messagesContainer.querySelector('.empty-state');
        if (emptyState) emptyState.remove();
        
        const messageElement = document.createElement('div');
        
        if (message.type === 'system') {
            messageElement.className = 'message system-message';
            messageElement.innerHTML = `
                <div class="message-text">${utils.sanitizeText(message.text)}</div>
            `;
        } else {
            const isOwn = message.userId === state.currentUser?.id;
            messageElement.className = `message ${isOwn ? 'own' : ''}`;
            
            messageElement.innerHTML = `
                <div class="message-avatar" style="background-color: ${message.color}">
                    ${utils.getUserAvatar(message.author)}
                </div>
                <div class="message-content">
                    <div class="message-header">
                        <span class="message-author">${utils.sanitizeText(message.author)}</span>
                        <span class="message-time">${utils.formatTime(new Date(message.timestamp))}</span>
                    </div>
                    <div class="message-text">${utils.sanitizeText(message.text)}</div>
                </div>
            `;
        }
        
        messagesContainer.appendChild(messageElement);
    },
    
    renderEmptyState: () => {
        const messagesContainer = document.getElementById('chatMessages');
        messagesContainer.innerHTML = `
            <div class="empty-state">
                <i class="fas fa-comments"></i>
                <h3>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç!</h3>
                <p>–ü–æ–∫–∞ –∑–¥–µ—Å—å –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç. –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–≤—ã–º!</p>
            </div>
        `;
    },
    
    scrollToBottom: () => {
        const messagesContainer = document.getElementById('chatMessages');
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    },
    
    sendMessage: (text) => {
        if (!text.trim() || !state.currentUser) return false;
        
        const message = {
            id: utils.generateId(),
            text: text.trim(),
            author: state.currentUser.name,
            userId: state.currentUser.id,
            color: state.currentUser.color,
            timestamp: new Date().toISOString(),
            type: 'user'
        };
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        // –ü–æ–∫–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ
        messageManager.addMessage(message);
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        setTimeout(() => {
            chatSimulation.simulateResponse();
        }, Math.random() * 3000 + 1000);
        
        return true;
    }
};

// –°–∏–º—É–ª—è—Ü–∏—è —á–∞—Ç–∞ (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
const chatSimulation = {
    botNames: [
        '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ë–æ—Ç', '–£–º–Ω—ã–π –ü–æ–º–æ—â–Ω–∏–∫', '–í–µ—Å–µ–ª—ã–π –°–æ–±–µ—Å–µ–¥–Ω–∏–∫', 
        '–ú—É–¥—Ä—ã–π –°–æ–≤–µ—Ç—á–∏–∫', '–ó–∞–≥–∞–¥–æ—á–Ω—ã–π –°—Ç—Ä–∞–Ω–Ω–∏–∫'
    ],
    
    responses: [
        '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?', '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å!', '–°–æ–≥–ª–∞—Å–µ–Ω —Å –≤–∞–º–∏',
        '–ê —á—Ç–æ –≤—ã –æ–± —ç—Ç–æ–º –¥—É–º–∞–µ—Ç–µ?', '–û—Ç–ª–∏—á–Ω–∞—è –ø–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è!',
        '–ö—Ç–æ-–Ω–∏–±—É–¥—å —Å–º–æ—Ç—Ä–µ–ª –Ω–æ–≤—ã–π —Ñ–∏–ª—å–º?', '–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è –≤—Å–µ–º!',
        '–õ—é–±–æ–ø—ã—Ç–Ω–æ... ü§î', '–¢–æ—á–Ω–æ –ø–æ–¥–º–µ—á–µ–Ω–æ!', '–ê —É –º–µ–Ω—è –¥—Ä—É–≥–æ–µ –º–Ω–µ–Ω–∏–µ',
        '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ', '–≠—Ç–æ –Ω–∞–ø–æ–º–Ω–∏–ª–æ –º–Ω–µ –æ–¥–Ω—É –∏—Å—Ç–æ—Ä–∏—é...',
        '–ö—Å—Ç–∞—Ç–∏, –∞ –≤—ã –∑–Ω–∞–ª–∏, —á—Ç–æ...', '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é! üëç'
    ],
    
    simulateResponse: () => {
        if (Math.random() > 0.4) return; // 40% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
        
        const name = chatSimulation.botNames[Math.floor(Math.random() * chatSimulation.botNames.length)];
        const text = chatSimulation.responses[Math.floor(Math.random() * chatSimulation.responses.length)];
        
        const message = {
            id: utils.generateId(),
            text: text,
            author: name,
            userId: utils.generateId(),
            color: utils.getRandomColor(),
            timestamp: new Date().toISOString(),
            type: 'user'
        };
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
        typingManager.showTyping(name);
        
        setTimeout(() => {
            typingManager.hideTyping();
            messageManager.addMessage(message);
        }, Math.random() * 2000 + 1000);
    },
    
    simulateUserJoin: () => {
        const name = chatSimulation.botNames[Math.floor(Math.random() * chatSimulation.botNames.length)];
        const message = {
            id: utils.generateId(),
            text: `${name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É`,
            type: 'system',
            timestamp: new Date().toISOString()
        };
        
        messageManager.addMessage(message);
        onlineManager.updateCount(Math.floor(Math.random() * 10) + 1);
    }
};

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –ø–µ—á–∞—Ç–∞–Ω–∏—è
const typingManager = {
    showTyping: (userName) => {
        state.typingUsers.add(userName);
        typingManager.updateDisplay();
    },
    
    hideTyping: (userName = null) => {
        if (userName) {
            state.typingUsers.delete(userName);
        } else {
            state.typingUsers.clear();
        }
        typingManager.updateDisplay();
    },
    
    updateDisplay: () => {
        const indicator = document.getElementById('typingIndicator');
        
        if (state.typingUsers.size > 0) {
            const names = Array.from(state.typingUsers).slice(0, 2);
            let text = names.join(', ') + ' –ø–µ—á–∞—Ç–∞–µ—Ç';
            if (state.typingUsers.size > 2) {
                text += ` –∏ –µ—â—ë ${state.typingUsers.size - 2}`;
            }
            text += '...';
            
            indicator.querySelector('.typing-text').textContent = text;
            indicator.classList.add('show');
        } else {
            indicator.classList.remove('show');
        }
    }
};

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
const onlineManager = {
    updateCount: (count) => {
        document.getElementById('onlineCount').textContent = count;
    }
};

// UI –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
const uiController = {
    init: () => {
        uiController.setupEventListeners();
        uiController.setupEmojiPicker();
        uiController.setupNameModal();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!userManager.loadUser()) {
            uiController.showNameModal();
        } else {
            userManager.updateUserDisplay();
            messageManager.renderEmptyState();
            
            // –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            setTimeout(() => {
                chatSimulation.simulateUserJoin();
            }, 2000);
        }
    },
    
    setupEventListeners: () => {
        const messageInput = document.getElementById('messageInput');
        const sendBtn = document.getElementById('sendBtn');
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        sendBtn.addEventListener('click', uiController.handleSendMessage);
        messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                uiController.handleSendMessage();
            }
        });
        
        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
        let typingTimeout;
        messageInput.addEventListener('input', () => {
            if (!state.isTyping) {
                state.isTyping = true;
                // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            }
            
            clearTimeout(typingTimeout);
            typingTimeout = setTimeout(() => {
                state.isTyping = false;
            }, CONFIG.typingTimeout);
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ —ç–º–æ–¥–∑–∏-–ø–∏–∫–µ—Ä–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
        document.addEventListener('click', (e) => {
            const emojiPicker = document.getElementById('emojiPicker');
            const emojiBtn = document.getElementById('emojiBtn');
            
            if (!emojiPicker.contains(e.target) && !emojiBtn.contains(e.target)) {
                emojiPicker.classList.remove('show');
            }
        });
    },
    
    setupEmojiPicker: () => {
        const emojiBtn = document.getElementById('emojiBtn');
        const emojiPicker = document.getElementById('emojiPicker');
        const messageInput = document.getElementById('messageInput');
        
        emojiBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            emojiPicker.classList.toggle('show');
        });
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        emojiPicker.addEventListener('click', (e) => {
            if (e.target.classList.contains('emoji')) {
                const emoji = e.target.textContent;
                const start = messageInput.selectionStart;
                const end = messageInput.selectionEnd;
                const text = messageInput.value;
                
                messageInput.value = text.substring(0, start) + emoji + text.substring(end);
                messageInput.setSelectionRange(start + emoji.length, start + emoji.length);
                messageInput.focus();
                
                emojiPicker.classList.remove('show');
            }
        });
    },
    
    setupNameModal: () => {
        const modal = document.getElementById('nameModal');
        const nameInput = document.getElementById('nameInput');
        const joinBtn = document.getElementById('joinChatBtn');
        const nameSuggestions = document.getElementById('nameSuggestions');
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–º—ë–Ω
        for (let i = 0; i < 6; i++) {
            const suggestion = document.createElement('span');
            suggestion.className = 'name-suggestion';
            suggestion.textContent = utils.getRandomName();
            suggestion.addEventListener('click', () => {
                nameInput.value = suggestion.textContent;
            });
            nameSuggestions.appendChild(suggestion);
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ —á–∞—Ç
        const joinChat = () => {
            const name = nameInput.value.trim();
            if (name.length < 2) {
                utils.showNotification('–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞', 'error');
                return;
            }
            if (name.length > CONFIG.maxNameLength) {
                utils.showNotification(`–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å ${CONFIG.maxNameLength} —Å–∏–º–≤–æ–ª–æ–≤`, 'error');
                return;
            }
            
            userManager.createUser(name);
            userManager.updateUserDisplay();
            uiController.hideNameModal();
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ
            const joinMessage = {
                id: utils.generateId(),
                text: `${name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É`,
                type: 'system',
                timestamp: new Date().toISOString()
            };
            
            messageManager.addMessage(joinMessage);
            utils.showNotification('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç!');
            
            // –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            setTimeout(() => {
                chatSimulation.simulateUserJoin();
            }, 3000);
        };
        
        joinBtn.addEventListener('click', joinChat);
        nameInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                joinChat();
            }
        });
        
        // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        setTimeout(() => nameInput.focus(), 100);
    },
    
    showNameModal: () => {
        document.getElementById('nameModal').style.display = 'flex';
    },
    
    hideNameModal: () => {
        document.getElementById('nameModal').style.display = 'none';
    },
    
    handleSendMessage: () => {
        const messageInput = document.getElementById('messageInput');
        const text = messageInput.value.trim();
        
        if (!text) return;
        
        if (text.length > CONFIG.maxMessageLength) {
            utils.showNotification(`–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å ${CONFIG.maxMessageLength} —Å–∏–º–≤–æ–ª–æ–≤`, 'error');
            return;
        }
        
        if (messageManager.sendMessage(text)) {
            messageInput.value = '';
            document.getElementById('emojiPicker').classList.remove('show');
        }
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–±–∏–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    mobileSupport.init();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
    uiController.init();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –æ–Ω–ª–∞–π–Ω —Å —Å–ª—É—á–∞–π–Ω—ã–º —á–∏—Å–ª–æ–º
    onlineManager.updateCount(Math.floor(Math.random() * 5) + 1);
    
    // –ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    if (mobileSupport.isMobile()) {
        setTimeout(() => {
            messageManager.addMessage('system', '–í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ! –î–ª—è –ª—É—á—à–µ–≥–æ –æ–ø—ã—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üì±', 'system');
        }, 2000);
    }
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    setInterval(() => {
        document.querySelectorAll('.message-time').forEach(timeElement => {
            const message = state.messages.find(m => 
                timeElement.closest('.message')?.querySelector('.message-author')?.textContent === m.author
            );
            if (message) {
                timeElement.textContent = utils.formatTime(new Date(message.timestamp));
            }
        });
    }, 60000);
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —Å–∏–º—É–ª–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    setInterval(() => {
        if (Math.random() > 0.7) {
            chatSimulation.simulateResponse();
        }
    }, 10000);
    
    console.log('–ß–∞—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ —à–∞—Ä–∏–Ω–≥–∞
    const shareChatBtn = document.getElementById('shareChatBtn');
    if (shareChatBtn) {
        shareChatBtn.addEventListener('click', openShareModal);
    }
});

// –§—É–Ω–∫—Ü–∏–∏ —à–∞—Ä–∏–Ω–≥–∞
const shareManager = {
    currentUrl: window.location.href,
    shareText: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –∞–Ω–æ–Ω–∏–º–Ω–æ–º—É —á–∞—Ç—É! üí¨',
    shareTitle: '–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç - Flutter Flow',
    
    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Å—ã–ª–∫—É
    getCurrentUrl: () => {
        return shareManager.currentUrl;
    },
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞ –¥–ª—è —Å—Å—ã–ª–∫–∏
    generateQR: (url) => {
        const qrContainer = document.getElementById('shareQrCode');
        if (qrContainer && typeof QRCode !== 'undefined') {
            qrContainer.innerHTML = '';
            new QRCode(qrContainer, {
                text: url,
                width: 120,
                height: 120,
                colorDark: '#667eea',
                colorLight: '#ffffff',
                correctLevel: QRCode.CorrectLevel.M
            });
        }
    }
};

// –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —à–∞—Ä–∏–Ω–≥–∞
function openShareModal() {
    const shareModal = document.getElementById('shareModal');
    const shareUrlInput = document.getElementById('shareUrl');
    
    if (shareModal && shareUrlInput) {
        shareUrlInput.value = shareManager.getCurrentUrl();
        shareModal.style.display = 'flex';
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥
        setTimeout(() => {
            shareManager.generateQR(shareManager.getCurrentUrl());
        }, 100);
    }
}

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —à–∞—Ä–∏–Ω–≥–∞
function closeShareModal() {
    const shareModal = document.getElementById('shareModal');
    if (shareModal) {
        shareModal.style.display = 'none';
    }
}

// –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É
function copyShareUrl() {
    const shareUrlInput = document.getElementById('shareUrl');
    if (shareUrlInput) {
        shareUrlInput.select();
        shareUrlInput.setSelectionRange(0, 99999);
        
        try {
            document.execCommand('copy');
            utils.showNotification('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞! üìã', 'success');
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
            utils.showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É', 'error');
        }
    }
}

// –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ WhatsApp
function shareToWhatsApp() {
    const url = shareManager.getCurrentUrl();
    const text = encodeURIComponent(`${shareManager.shareText}\n\n${url}`);
    const whatsappUrl = `https://wa.me/?text=${text}`;
    
    // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º whatsapp:// —Å—Ö–µ–º—É
    if (mobileSupport.isMobile()) {
        const whatsappApp = `whatsapp://send?text=${text}`;
        window.location.href = whatsappApp;
        
        // Fallback –∫ –≤–µ–±-–≤–µ—Ä—Å–∏–∏ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            window.open(whatsappUrl, '_blank');
        }, 2000);
    } else {
        window.open(whatsappUrl, '_blank');
    }
}

// –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram
function shareToTelegram() {
    const url = shareManager.getCurrentUrl();
    const text = encodeURIComponent(shareManager.shareText);
    const telegramUrl = `https://t.me/share/url?url=${encodeURIComponent(url)}&text=${text}`;
    
    if (mobileSupport.isMobile()) {
        const telegramApp = `tg://msg_url?url=${encodeURIComponent(url)}&text=${text}`;
        window.location.href = telegramApp;
        
        setTimeout(() => {
            window.open(telegramUrl, '_blank');
        }, 2000);
    } else {
        window.open(telegramUrl, '_blank');
    }
}

// –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Facebook
function shareToFacebook() {
    const url = shareManager.getCurrentUrl();
    const facebookUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}`;
    window.open(facebookUrl, '_blank');
}

// –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Twitter
function shareToTwitter() {
    const url = shareManager.getCurrentUrl();
    const text = encodeURIComponent(`${shareManager.shareText} ${url}`);
    const twitterUrl = `https://twitter.com/intent/tweet?text=${text}`;
    window.open(twitterUrl, '_blank');
}

// –ù–∞—Ç–∏–≤–Ω—ã–π —à–∞—Ä–∏–Ω–≥
function nativeShare() {
    if (navigator.share) {
        navigator.share({
            title: shareManager.shareTitle,
            text: shareManager.shareText,
            url: shareManager.getCurrentUrl()
        }).then(() => {
            console.log('–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å');
        }).catch((error) => {
            console.log('–û—à–∏–±–∫–∞ —à–∞—Ä–∏–Ω–≥–∞:', error);
            copyShareUrl(); // Fallback –∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—é
        });
    } else {
        copyShareUrl(); // Fallback –∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—é
    }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
document.addEventListener('click', (e) => {
    const shareModal = document.getElementById('shareModal');
    if (shareModal && e.target === shareModal) {
        closeShareModal();
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
window.addEventListener('error', (e) => {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', e.error);
    utils.showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.', 'error');
});

// –ú–æ–±–∏–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ PWA
const mobileSupport = {
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    isMobile: () => {
        return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ||
               (window.innerWidth <= 768 && 'ontouchstart' in window);
    },
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ iOS
    isIOS: () => {
        return /iPad|iPhone|iPod/.test(navigator.userAgent);
    },
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PWA
    setupPWA: () => {
        // Service Worker —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        if ('serviceWorker' in navigator) {
            navigator.serviceWorker.register('/sw.js')
                .then(registration => console.log('SW registered:', registration))
                .catch(error => console.log('SW registration failed:', error));
        }
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PWA
        let deferredPrompt;
        window.addEventListener('beforeinstallprompt', (e) => {
            e.preventDefault();
            deferredPrompt = e;
            mobileSupport.showInstallButton();
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        window.addEventListener('appinstalled', () => {
            console.log('PWA —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            utils.showNotification('–ß–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ! üì±');
        });
    },
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    showInstallButton: () => {
        if (!mobileSupport.isMobile()) return;
        
        const installBtn = document.createElement('button');
        installBtn.className = 'install-btn';
        installBtn.innerHTML = 'üì± –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ';
        installBtn.style.cssText = `
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 25px;
            font-size: 14px;
            font-weight: 500;
            box-shadow: 0 4px 16px rgba(102, 126, 234, 0.4);
            z-index: 1000;
            animation: slideUp 0.3s ease-out;
        `;
        
        installBtn.addEventListener('click', async () => {
            if (deferredPrompt) {
                deferredPrompt.prompt();
                const result = await deferredPrompt.userChoice;
                if (result.outcome === 'accepted') {
                    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–∏–ª PWA');
                }
                deferredPrompt = null;
                installBtn.remove();
            }
        });
        
        document.body.appendChild(installBtn);
        
        // –ê–≤—Ç–æ—Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        setTimeout(() => installBtn.remove(), 10000);
    },
    
    // Touch-—Å–æ–±—ã—Ç–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ UX
    setupTouchEvents: () => {
        // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è iOS
        if (mobileSupport.isIOS()) {
            document.body.style.setProperty('-webkit-overflow-scrolling', 'touch');
        }
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥–≤–æ–π–Ω–æ–≥–æ —Ç–∞–ø–∞ –¥–ª—è –∑—É–º–∞
        let lastTouchEnd = 0;
        document.addEventListener('touchend', (event) => {
            const now = (new Date()).getTime();
            if (now - lastTouchEnd <= 300) {
                event.preventDefault();
            }
            lastTouchEnd = now;
        }, false);
        
        // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ–∫—É—Å–∞ –Ω–∞ –∏–Ω–ø—É—Ç–∞—Ö
        const messageInput = document.getElementById('messageInput');
        if (messageInput && mobileSupport.isMobile()) {
            messageInput.addEventListener('focus', () => {
                // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –∏–Ω–ø—É—Ç—É –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
                setTimeout(() => {
                    messageInput.scrollIntoView({
                        behavior: 'smooth',
                        block: 'center'
                    });
                }, 300);
            });
            
            // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∑—É–º–∞ –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –Ω–∞ iOS
            if (mobileSupport.isIOS()) {
                messageInput.addEventListener('touchstart', () => {
                    messageInput.style.fontSize = '16px';
                });
            }
        }
        
        // Swipe –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —ç–º–æ–¥–∑–∏-–ø–∏–∫–µ—Ä–∞
        const emojiPicker = document.getElementById('emojiPicker');
        if (emojiPicker) {
            let startY;
            emojiPicker.addEventListener('touchstart', (e) => {
                startY = e.touches[0].clientY;
            });
            
            emojiPicker.addEventListener('touchmove', (e) => {
                if (!startY) return;
                const currentY = e.touches[0].clientY;
                const diffY = startY - currentY;
                
                if (diffY < -50) { // Swipe –≤–Ω–∏–∑
                    emojiPicker.classList.remove('show');
                    startY = null;
                }
            });
        }
    },
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    setupVirtualKeyboard: () => {
        if (!mobileSupport.isMobile()) return;
        
        const chatMessages = document.getElementById('chatMessages');
        const inputContainer = document.querySelector('.message-input-container');
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        window.addEventListener('resize', () => {
            if (document.activeElement.tagName === 'INPUT') {
                setTimeout(() => {
                    messageManager.scrollToBottom();
                }, 150);
            }
        });
        
        // Visual Viewport API –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        if (window.visualViewport) {
            window.visualViewport.addEventListener('resize', () => {
                const viewport = window.visualViewport;
                if (viewport.height < window.innerHeight * 0.75) {
                    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–∫–∞–∑–∞–Ω–∞
                    document.body.style.setProperty('--keyboard-height', 
                        `${window.innerHeight - viewport.height}px`);
                } else {
                    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞
                    document.body.style.removeProperty('--keyboard-height');
                }
            });
        }
    },
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–±–∏–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    init: () => {
        if (mobileSupport.isMobile()) {
            console.log('–ú–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
            document.body.classList.add('mobile-device');
            
            if (mobileSupport.isIOS()) {
                document.body.classList.add('ios-device');
            }
            
            mobileSupport.setupPWA();
            mobileSupport.setupTouchEvents();
            mobileSupport.setupVirtualKeyboard();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–ø–∞ –≤–º–µ—Å—Ç–æ —Ö–æ–≤–µ—Ä–∞
            document.addEventListener('touchstart', () => {}, true);
        }
    }
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        CONFIG,
        state,
        utils,
        userManager,
        messageManager,
        uiController,
        mobileSupport
    };
}